// Code generated by MockGen. DO NOT EDIT.
// Source: api/tunnel/tunnel_grpc.pb.go

// Package mock_tunnel is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tunnel "github.com/yhzs8/grpcl4tunnel/api/tunnel"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockTunnelServiceClient is a mock of TunnelServiceClient interface.
type MockTunnelServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelServiceClientMockRecorder
}

// MockTunnelServiceClientMockRecorder is the mock recorder for MockTunnelServiceClient.
type MockTunnelServiceClientMockRecorder struct {
	mock *MockTunnelServiceClient
}

// NewMockTunnelServiceClient creates a new mock instance.
func NewMockTunnelServiceClient(ctrl *gomock.Controller) *MockTunnelServiceClient {
	mock := &MockTunnelServiceClient{ctrl: ctrl}
	mock.recorder = &MockTunnelServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnelServiceClient) EXPECT() *MockTunnelServiceClientMockRecorder {
	return m.recorder
}

// GetClientInitiatedTunnels mocks base method.
func (m *MockTunnelServiceClient) GetClientInitiatedTunnels(ctx context.Context, in *tunnel.TunnelGetPayload, opts ...grpc.CallOption) (*tunnel.TunnelList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClientInitiatedTunnels", varargs...)
	ret0, _ := ret[0].(*tunnel.TunnelList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientInitiatedTunnels indicates an expected call of GetClientInitiatedTunnels.
func (mr *MockTunnelServiceClientMockRecorder) GetClientInitiatedTunnels(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientInitiatedTunnels", reflect.TypeOf((*MockTunnelServiceClient)(nil).GetClientInitiatedTunnels), varargs...)
}

// TunnelChat mocks base method.
func (m *MockTunnelServiceClient) TunnelChat(ctx context.Context, opts ...grpc.CallOption) (tunnel.TunnelService_TunnelChatClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TunnelChat", varargs...)
	ret0, _ := ret[0].(tunnel.TunnelService_TunnelChatClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TunnelChat indicates an expected call of TunnelChat.
func (mr *MockTunnelServiceClientMockRecorder) TunnelChat(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TunnelChat", reflect.TypeOf((*MockTunnelServiceClient)(nil).TunnelChat), varargs...)
}

// MockTunnelService_TunnelChatClient is a mock of TunnelService_TunnelChatClient interface.
type MockTunnelService_TunnelChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelService_TunnelChatClientMockRecorder
}

// MockTunnelService_TunnelChatClientMockRecorder is the mock recorder for MockTunnelService_TunnelChatClient.
type MockTunnelService_TunnelChatClientMockRecorder struct {
	mock *MockTunnelService_TunnelChatClient
}

// NewMockTunnelService_TunnelChatClient creates a new mock instance.
func NewMockTunnelService_TunnelChatClient(ctrl *gomock.Controller) *MockTunnelService_TunnelChatClient {
	mock := &MockTunnelService_TunnelChatClient{ctrl: ctrl}
	mock.recorder = &MockTunnelService_TunnelChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnelService_TunnelChatClient) EXPECT() *MockTunnelService_TunnelChatClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockTunnelService_TunnelChatClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTunnelService_TunnelChatClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTunnelService_TunnelChatClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTunnelService_TunnelChatClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTunnelService_TunnelChatClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTunnelService_TunnelChatClient)(nil).Context))
}

// Header mocks base method.
func (m *MockTunnelService_TunnelChatClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTunnelService_TunnelChatClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTunnelService_TunnelChatClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockTunnelService_TunnelChatClient) Recv() (*tunnel.TunnelMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*tunnel.TunnelMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTunnelService_TunnelChatClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTunnelService_TunnelChatClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockTunnelService_TunnelChatClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTunnelService_TunnelChatClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTunnelService_TunnelChatClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockTunnelService_TunnelChatClient) Send(arg0 *tunnel.TunnelMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTunnelService_TunnelChatClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTunnelService_TunnelChatClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockTunnelService_TunnelChatClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTunnelService_TunnelChatClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTunnelService_TunnelChatClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockTunnelService_TunnelChatClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTunnelService_TunnelChatClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTunnelService_TunnelChatClient)(nil).Trailer))
}

// MockTunnelServiceServer is a mock of TunnelServiceServer interface.
type MockTunnelServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelServiceServerMockRecorder
}

// MockTunnelServiceServerMockRecorder is the mock recorder for MockTunnelServiceServer.
type MockTunnelServiceServerMockRecorder struct {
	mock *MockTunnelServiceServer
}

// NewMockTunnelServiceServer creates a new mock instance.
func NewMockTunnelServiceServer(ctrl *gomock.Controller) *MockTunnelServiceServer {
	mock := &MockTunnelServiceServer{ctrl: ctrl}
	mock.recorder = &MockTunnelServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnelServiceServer) EXPECT() *MockTunnelServiceServerMockRecorder {
	return m.recorder
}

// GetClientInitiatedTunnels mocks base method.
func (m *MockTunnelServiceServer) GetClientInitiatedTunnels(arg0 context.Context, arg1 *tunnel.TunnelGetPayload) (*tunnel.TunnelList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientInitiatedTunnels", arg0, arg1)
	ret0, _ := ret[0].(*tunnel.TunnelList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientInitiatedTunnels indicates an expected call of GetClientInitiatedTunnels.
func (mr *MockTunnelServiceServerMockRecorder) GetClientInitiatedTunnels(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientInitiatedTunnels", reflect.TypeOf((*MockTunnelServiceServer)(nil).GetClientInitiatedTunnels), arg0, arg1)
}

// TunnelChat mocks base method.
func (m *MockTunnelServiceServer) TunnelChat(arg0 tunnel.TunnelService_TunnelChatServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TunnelChat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TunnelChat indicates an expected call of TunnelChat.
func (mr *MockTunnelServiceServerMockRecorder) TunnelChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TunnelChat", reflect.TypeOf((*MockTunnelServiceServer)(nil).TunnelChat), arg0)
}

// mustEmbedUnimplementedTunnelServiceServer mocks base method.
func (m *MockTunnelServiceServer) mustEmbedUnimplementedTunnelServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTunnelServiceServer")
}

// mustEmbedUnimplementedTunnelServiceServer indicates an expected call of mustEmbedUnimplementedTunnelServiceServer.
func (mr *MockTunnelServiceServerMockRecorder) mustEmbedUnimplementedTunnelServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTunnelServiceServer", reflect.TypeOf((*MockTunnelServiceServer)(nil).mustEmbedUnimplementedTunnelServiceServer))
}

// MockUnsafeTunnelServiceServer is a mock of UnsafeTunnelServiceServer interface.
type MockUnsafeTunnelServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTunnelServiceServerMockRecorder
}

// MockUnsafeTunnelServiceServerMockRecorder is the mock recorder for MockUnsafeTunnelServiceServer.
type MockUnsafeTunnelServiceServerMockRecorder struct {
	mock *MockUnsafeTunnelServiceServer
}

// NewMockUnsafeTunnelServiceServer creates a new mock instance.
func NewMockUnsafeTunnelServiceServer(ctrl *gomock.Controller) *MockUnsafeTunnelServiceServer {
	mock := &MockUnsafeTunnelServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTunnelServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTunnelServiceServer) EXPECT() *MockUnsafeTunnelServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTunnelServiceServer mocks base method.
func (m *MockUnsafeTunnelServiceServer) mustEmbedUnimplementedTunnelServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTunnelServiceServer")
}

// mustEmbedUnimplementedTunnelServiceServer indicates an expected call of mustEmbedUnimplementedTunnelServiceServer.
func (mr *MockUnsafeTunnelServiceServerMockRecorder) mustEmbedUnimplementedTunnelServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTunnelServiceServer", reflect.TypeOf((*MockUnsafeTunnelServiceServer)(nil).mustEmbedUnimplementedTunnelServiceServer))
}

// MockTunnelService_TunnelChatServer is a mock of TunnelService_TunnelChatServer interface.
type MockTunnelService_TunnelChatServer struct {
	ctrl     *gomock.Controller
	recorder *MockTunnelService_TunnelChatServerMockRecorder
}

// MockTunnelService_TunnelChatServerMockRecorder is the mock recorder for MockTunnelService_TunnelChatServer.
type MockTunnelService_TunnelChatServerMockRecorder struct {
	mock *MockTunnelService_TunnelChatServer
}

// NewMockTunnelService_TunnelChatServer creates a new mock instance.
func NewMockTunnelService_TunnelChatServer(ctrl *gomock.Controller) *MockTunnelService_TunnelChatServer {
	mock := &MockTunnelService_TunnelChatServer{ctrl: ctrl}
	mock.recorder = &MockTunnelService_TunnelChatServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTunnelService_TunnelChatServer) EXPECT() *MockTunnelService_TunnelChatServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockTunnelService_TunnelChatServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTunnelService_TunnelChatServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTunnelService_TunnelChatServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockTunnelService_TunnelChatServer) Recv() (*tunnel.TunnelMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*tunnel.TunnelMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTunnelService_TunnelChatServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTunnelService_TunnelChatServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockTunnelService_TunnelChatServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTunnelService_TunnelChatServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTunnelService_TunnelChatServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockTunnelService_TunnelChatServer) Send(arg0 *tunnel.TunnelMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTunnelService_TunnelChatServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTunnelService_TunnelChatServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockTunnelService_TunnelChatServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockTunnelService_TunnelChatServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockTunnelService_TunnelChatServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockTunnelService_TunnelChatServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTunnelService_TunnelChatServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTunnelService_TunnelChatServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockTunnelService_TunnelChatServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTunnelService_TunnelChatServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTunnelService_TunnelChatServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockTunnelService_TunnelChatServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockTunnelService_TunnelChatServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockTunnelService_TunnelChatServer)(nil).SetTrailer), arg0)
}
