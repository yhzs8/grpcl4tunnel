// Code generated by MockGen. DO NOT EDIT.
// Source: internal/protocols/common.go

// Package mock_protocols is a generated GoMock package.
package test

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tunnel "github.com/yhzs8/grpcl4tunnel/api/tunnel"
	protocols "github.com/yhzs8/grpcl4tunnel/internal/protocols"
)

// MockProtocolInterface is a mock of ProtocolInterface interface.
type MockProtocolInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolInterfaceMockRecorder
}

// MockProtocolInterfaceMockRecorder is the mock recorder for MockProtocolInterface.
type MockProtocolInterfaceMockRecorder struct {
	mock *MockProtocolInterface
}

// NewMockProtocolInterface creates a new mock instance.
func NewMockProtocolInterface(ctrl *gomock.Controller) *MockProtocolInterface {
	mock := &MockProtocolInterface{ctrl: ctrl}
	mock.recorder = &MockProtocolInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocolInterface) EXPECT() *MockProtocolInterfaceMockRecorder {
	return m.recorder
}

// ListenIncomingBytes mocks base method.
func (m *MockProtocolInterface) ListenIncomingBytes(listener *protocols.ProtocolListener, localHost string, localPort int32) (*protocols.ProtocolConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenIncomingBytes", listener, localHost, localPort)
	ret0, _ := ret[0].(*protocols.ProtocolConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListenIncomingBytes indicates an expected call of ListenIncomingBytes.
func (mr *MockProtocolInterfaceMockRecorder) ListenIncomingBytes(listener, localHost, localPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenIncomingBytes", reflect.TypeOf((*MockProtocolInterface)(nil).ListenIncomingBytes), listener, localHost, localPort)
}

// ReceiveBytesFromSocket mocks base method.
func (m *MockProtocolInterface) ReceiveBytesFromSocket(conn *protocols.ProtocolConn) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveBytesFromSocket", conn)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveBytesFromSocket indicates an expected call of ReceiveBytesFromSocket.
func (mr *MockProtocolInterfaceMockRecorder) ReceiveBytesFromSocket(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveBytesFromSocket", reflect.TypeOf((*MockProtocolInterface)(nil).ReceiveBytesFromSocket), conn)
}

// SendBytesToSocket mocks base method.
func (m *MockProtocolInterface) SendBytesToSocket(conn *protocols.ProtocolConn, bytes []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBytesToSocket", conn, bytes)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendBytesToSocket indicates an expected call of SendBytesToSocket.
func (mr *MockProtocolInterfaceMockRecorder) SendBytesToSocket(conn, bytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBytesToSocket", reflect.TypeOf((*MockProtocolInterface)(nil).SendBytesToSocket), conn, bytes)
}

// SetupIncomingSocket mocks base method.
func (m *MockProtocolInterface) SetupIncomingSocket(localHost string, localPort int32) (*protocols.ProtocolListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupIncomingSocket", localHost, localPort)
	ret0, _ := ret[0].(*protocols.ProtocolListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupIncomingSocket indicates an expected call of SetupIncomingSocket.
func (mr *MockProtocolInterfaceMockRecorder) SetupIncomingSocket(localHost, localPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupIncomingSocket", reflect.TypeOf((*MockProtocolInterface)(nil).SetupIncomingSocket), localHost, localPort)
}

// SetupOutgoingSocket mocks base method.
func (m *MockProtocolInterface) SetupOutgoingSocket(remoteHost string, remotePort int32) (*protocols.ProtocolConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupOutgoingSocket", remoteHost, remotePort)
	ret0, _ := ret[0].(*protocols.ProtocolConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetupOutgoingSocket indicates an expected call of SetupOutgoingSocket.
func (mr *MockProtocolInterfaceMockRecorder) SetupOutgoingSocket(remoteHost, remotePort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupOutgoingSocket", reflect.TypeOf((*MockProtocolInterface)(nil).SetupOutgoingSocket), remoteHost, remotePort)
}

// ShutdownListener mocks base method.
func (m *MockProtocolInterface) ShutdownListener(listener *protocols.ProtocolListener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownListener", listener)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownListener indicates an expected call of ShutdownListener.
func (mr *MockProtocolInterfaceMockRecorder) ShutdownListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownListener", reflect.TypeOf((*MockProtocolInterface)(nil).ShutdownListener), listener)
}

// ShutdownSocket mocks base method.
func (m *MockProtocolInterface) ShutdownSocket(conn *protocols.ProtocolConn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownSocket", conn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownSocket indicates an expected call of ShutdownSocket.
func (mr *MockProtocolInterfaceMockRecorder) ShutdownSocket(conn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownSocket", reflect.TypeOf((*MockProtocolInterface)(nil).ShutdownSocket), conn)
}

// MockGetProtocolImplInterface is a mock of GetProtocolImplInterface interface.
type MockGetProtocolImplInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGetProtocolImplInterfaceMockRecorder
}

// MockGetProtocolImplInterfaceMockRecorder is the mock recorder for MockGetProtocolImplInterface.
type MockGetProtocolImplInterfaceMockRecorder struct {
	mock *MockGetProtocolImplInterface
}

// NewMockGetProtocolImplInterface creates a new mock instance.
func NewMockGetProtocolImplInterface(ctrl *gomock.Controller) *MockGetProtocolImplInterface {
	mock := &MockGetProtocolImplInterface{ctrl: ctrl}
	mock.recorder = &MockGetProtocolImplInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetProtocolImplInterface) EXPECT() *MockGetProtocolImplInterfaceMockRecorder {
	return m.recorder
}

// GetProtocolImpl mocks base method.
func (m *MockGetProtocolImplInterface) GetProtocolImpl(protocol tunnel.Protocol) protocols.ProtocolInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProtocolImpl", protocol)
	ret0, _ := ret[0].(protocols.ProtocolInterface)
	return ret0
}

// GetProtocolImpl indicates an expected call of GetProtocolImpl.
func (mr *MockGetProtocolImplInterfaceMockRecorder) GetProtocolImpl(protocol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProtocolImpl", reflect.TypeOf((*MockGetProtocolImplInterface)(nil).GetProtocolImpl), protocol)
}
